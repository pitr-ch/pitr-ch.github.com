<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pitr.ch]]></title>
  <link href="http://blog.pitr.ch/atom.xml" rel="self"/>
  <link href="http://blog.pitr.ch/"/>
  <updated>2013-05-14T22:20:34+02:00</updated>
  <id>http://blog.pitr.ch/</id>
  <author>
    <name><![CDATA[Petr Chalupa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Algebrick - Algebraic types and pattern matching for Ruby]]></title>
    <link href="http://blog.pitr.ch/blog/2013/05/14/algebrick-algebraic-types-and-pattern-matching-for-ruby/"/>
    <updated>2013-05-14T21:19:00+02:00</updated>
    <id>http://blog.pitr.ch/blog/2013/05/14/algebrick-algebraic-types-and-pattern-matching-for-ruby</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just released a new gem <strong>algebrick</strong> which brings Algebraic types and pattern matching to Ruby.
It&rsquo;s not as powerfull as Haskell&rsquo;s but it can still be quite useful. Let me give you a quick taste of the syntax.</p>

<!-- more -->




<figure class='code'><figcaption><span>Quick example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># load DSL for type definition</span>
</span><span class='line'><span class="kp">extend</span> <span class="ss">Algebrick</span><span class="p">:</span><span class="ss">:DSL</span>                              <span class="c1"># =&gt; main</span>
</span><span class='line'><span class="c1"># define a Maybe type, which has two possible values:</span>
</span><span class='line'><span class="c1"># None or Some caring a value of Object type</span>
</span><span class='line'><span class="n">type_def</span> <span class="p">{</span> <span class="n">maybe</span> <span class="o">===</span> <span class="n">none</span> <span class="o">|</span> <span class="n">some</span><span class="p">(</span><span class="no">Object</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; [Maybe(None | Some), None, Some(Object)]</span>
</span><span class='line'><span class="c1"># Maybe, None and Some are now defined</span>
</span><span class='line'><span class="o">[</span><span class="no">Maybe</span><span class="p">,</span> <span class="no">None</span><span class="p">,</span> <span class="no">Some</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; [Maybe(None | Some), None, Some(Object)]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># access #match and #any methods for pattern matching</span>
</span><span class='line'><span class="kp">extend</span> <span class="ss">Algebrick</span><span class="p">:</span><span class="ss">:Matching</span>                         <span class="c1"># =&gt; main</span>
</span><span class='line'>
</span><span class='line'><span class="n">match</span> <span class="no">None</span><span class="p">,</span>
</span><span class='line'>      <span class="no">None</span> <span class="o">&gt;&gt;</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>      <span class="c1"># ~ will match value of Some and pass it to the block</span>
</span><span class='line'>      <span class="no">Some</span><span class="o">.</span><span class="p">(</span><span class="o">~</span><span class="n">any</span><span class="p">)</span> <span class="o">--&gt;</span> <span class="n">value</span> <span class="p">{</span> <span class="n">value</span> <span class="p">}</span>              <span class="c1"># =&gt; nil</span>
</span><span class='line'>
</span><span class='line'><span class="n">match</span> <span class="no">Some</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="no">None</span> <span class="o">&gt;&gt;</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>      <span class="no">Some</span><span class="o">.</span><span class="p">(</span><span class="o">~</span><span class="n">any</span><span class="p">)</span> <span class="o">--&gt;</span> <span class="n">value</span> <span class="p">{</span> <span class="n">value</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>            <span class="c1"># =&gt; 2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># lets add some method to the Maybe type</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Maybe</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">maybe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">None</span>
</span><span class='line'>    <span class="k">when</span> <span class="no">Some</span>
</span><span class='line'>      <span class="n">block</span><span class="o">.</span><span class="n">call</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>                                                <span class="c1"># =&gt; nil</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># #maybe method is now defined on both None and Some</span>
</span><span class='line'><span class="no">None</span><span class="o">.</span><span class="n">maybe</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="o">|</span> <span class="k">raise</span> <span class="s1">&#39;never ever happens&#39;</span> <span class="p">}</span>      <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="c1"># block is called with the value</span>
</span><span class='line'><span class="no">Some</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">maybe</span> <span class="p">{</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>                          <span class="c1"># =&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Do you wish to know more?</h2>

<ul>
<li>Documentation: <a href="http://blog.pitr.ch/algebrick">http://blog.pitr.ch/algebrick</a></li>
<li>Source: <a href="https://github.com/pitr-ch/algebrick">https://github.com/pitr-ch/algebrick</a></li>
</ul>


<p>Please leave a comment if you have questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Praise - pry session for every exception]]></title>
    <link href="http://blog.pitr.ch/blog/2013/05/14/praise-pry-session-for-every-exception/"/>
    <updated>2013-05-14T15:09:00+02:00</updated>
    <id>http://blog.pitr.ch/blog/2013/05/14/praise-pry-session-for-every-exception</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just released a new gem <strong>praise</strong> (pry + raise = praise).
A small gem for intercepting <code>raise</code> calls to dig up hidden and buried exceptions.</p>

<!-- more -->


<h2>Difference between <code>praise</code> and <code>pry-rescue</code></h2>

<p><code>praise</code> allows a developer to investigate all exceptions including the ones rescued later.
<code>pry-rescue</code> on the other hand will work only for exceptions which are un-handled by the process.
Typical use-case is e.g. a worker, which is rescuing all exceptions. <code>pry-rescue</code> cannot help with
investigation of these exceptions.</p>

<h2>Do you wish to know more?</h2>

<ul>
<li>Documentation: <a href="http://blog.pitr.ch/praise">http://blog.pitr.ch/praise</a></li>
<li>Source: <a href="https://github.com/pitr-ch/praise">https://github.com/pitr-ch/praise</a></li>
</ul>


<p>Please leave a comment if you have questions.</p>
]]></content>
  </entry>
  
</feed>
