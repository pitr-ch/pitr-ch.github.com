<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gem | Pitr.ch]]></title>
  <link href="http://blog.pitr.ch/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://blog.pitr.ch/"/>
  <updated>2013-05-19T17:22:51+02:00</updated>
  <id>http://blog.pitr.ch/</id>
  <author>
    <name><![CDATA[Petr Chalupa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Htmless - Fast extensible html5 builder in pure Ruby]]></title>
    <link href="http://blog.pitr.ch/blog/2013/05/17/htmless-fast-extensible-html5-builder-in-pure-ruby/"/>
    <updated>2013-05-17T12:23:00+02:00</updated>
    <id>http://blog.pitr.ch/blog/2013/05/17/htmless-fast-extensible-html5-builder-in-pure-ruby</id>
    <content type="html"><![CDATA[<p>Htmless is actually not a new gem. It was renamed from a gem named hammer_builder.</p>

<!-- more -->


<h2>Quick syntax example</h2>

<p>``` ruby
Htmless::Formatted.new.go_in do
  html5
  html do</p>

<pre><code>head { title 'my_page' }
body do
  div.content! do
    p.centered "my page's content"
  end
end
</code></pre>

<p>  end
end.to_html
```</p>

<p>returns</p>

<p>``` html
&lt;!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head></p>

<pre><code>&lt;title&gt;my_page&lt;/title&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;div id="content"&gt;
  &lt;p class="centered"&gt;my page's content&lt;/p&gt;
&lt;/div&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<h2>What&rsquo;s new</h2>

<p>There is not much news, only the name and it&rsquo;s no longer dependent on ActiveSupport.
This is maintenance release.</p>

<h2>For those not knowing the gem</h2>

<p>Main features of Htmless are:</p>

<ul>
<li>It&rsquo;s as fast as template-engines (erb) and much faster then other Ruby HTML builders.</li>
<li>You can use inheritance (impossible with templates) and other goodness of Ruby.</li>
<li>You can write html in pure Ruby.</li>
</ul>


<h2>Do you wish to know more?</h2>

<ul>
<li>Documentation: <a href="http://blog.pitr.ch/htmless">http://blog.pitr.ch/htmless</a></li>
<li>Source: <a href="https://github.com/pitr-ch/htmless">https://github.com/pitr-ch/htmless</a></li>
</ul>


<p>Please leave a comment if you have questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algebrick - Algebraic types and pattern matching for Ruby]]></title>
    <link href="http://blog.pitr.ch/blog/2013/05/14/algebrick-algebraic-types-and-pattern-matching-for-ruby/"/>
    <updated>2013-05-14T21:19:00+02:00</updated>
    <id>http://blog.pitr.ch/blog/2013/05/14/algebrick-algebraic-types-and-pattern-matching-for-ruby</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just released a new gem <strong>algebrick</strong> which brings Algebraic types and pattern matching to Ruby.
It&rsquo;s not as powerfull as Haskell&rsquo;s but it can still be quite useful. Let me give you a quick taste of the syntax.</p>

<!-- more -->


<p>``` ruby Quick example</p>

<h1>load DSL for type definition</h1>

<p>extend Algebrick::DSL                              # => main</p>

<h1>define a Maybe type, which has two possible values:</h1>

<h1>None or Some caring a value of Object type</h1>

<p>type_def { maybe === none | some(Object) }</p>

<h1>=> [Maybe(None | Some), None, Some(Object)]</h1>

<h1>Maybe, None and Some are now defined</h1>

<p>[Maybe, None, Some]</p>

<h1>=> [Maybe(None | Some), None, Some(Object)]</h1>

<h1>access #match and #any methods for pattern matching</h1>

<p>extend Algebrick::Matching                         # => main</p>

<p>match None,</p>

<pre><code>  None &gt;&gt; nil,
  # ~ will match value of Some and pass it to the block
  Some.(~any) --&gt; value { value }              # =&gt; nil
</code></pre>

<p>match Some[1],</p>

<pre><code>  None &gt;&gt; nil,
  Some.(~any) --&gt; value { value*2 }            # =&gt; 2
</code></pre>

<h1>lets add some method to the Maybe type</h1>

<p>module Maybe
  def maybe(&amp;block)</p>

<pre><code>case self
when None
when Some
  block.call value
end
</code></pre>

<p>  end
end                                                # => nil</p>

<h1>#maybe method is now defined on both None and Some</h1>

<p>None.maybe { |_| raise &lsquo;never ever happens&rsquo; }      # => nil</p>

<h1>block is called with the value</h1>

<p>Some[1].maybe { |v| v*2 }                          # => 2
```</p>

<h2>Do you wish to know more?</h2>

<ul>
<li>Documentation: <a href="http://blog.pitr.ch/algebrick">http://blog.pitr.ch/algebrick</a></li>
<li>Source: <a href="https://github.com/pitr-ch/algebrick">https://github.com/pitr-ch/algebrick</a></li>
</ul>


<p>Please leave a comment if you have questions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Praise - pry session for every exception]]></title>
    <link href="http://blog.pitr.ch/blog/2013/05/14/praise-pry-session-for-every-exception/"/>
    <updated>2013-05-14T15:09:00+02:00</updated>
    <id>http://blog.pitr.ch/blog/2013/05/14/praise-pry-session-for-every-exception</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just released a new gem <strong>praise</strong> (pry + raise = praise).
A small gem for intercepting <code>raise</code> calls to dig up hidden and buried exceptions.</p>

<!-- more -->


<h2>Difference between <code>praise</code> and <code>pry-rescue</code></h2>

<p><code>praise</code> allows a developer to investigate all exceptions including the ones rescued later.
<code>pry-rescue</code> on the other hand will work only for exceptions which are un-handled by the process.
Typical use-case is e.g. a worker, which is rescuing all exceptions. <code>pry-rescue</code> cannot help with
investigation of these exceptions.</p>

<h2>Do you wish to know more?</h2>

<ul>
<li>Documentation: <a href="http://blog.pitr.ch/praise">http://blog.pitr.ch/praise</a></li>
<li>Source: <a href="https://github.com/pitr-ch/praise">https://github.com/pitr-ch/praise</a></li>
</ul>


<p>Please leave a comment if you have questions.</p>
]]></content>
  </entry>
  
</feed>
