<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: whim | Pitr.ch]]></title>
  <link href="http://blog.pitr.ch/blog/categories/whim/atom.xml" rel="self"/>
  <link href="http://blog.pitr.ch/"/>
  <updated>2013-06-02T15:19:29+02:00</updated>
  <id>http://blog.pitr.ch/</id>
  <author>
    <name><![CDATA[Petr Chalupa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make traps for future mistakes]]></title>
    <link href="http://blog.pitr.ch/blog/2013/06/02/make-traps-for-future-mistakes/"/>
    <updated>2013-06-02T10:58:00+02:00</updated>
    <id>http://blog.pitr.ch/blog/2013/06/02/make-traps-for-future-mistakes</id>
    <content type="html"><![CDATA[<p>I love to raise <code>ArgumentErrors</code>, <code>TypeErrors</code>, etc. whenever an API is misused. It prevents a lot of bugs. 
Recently I fond another use for exceptions. </p>

<!-- more -->

<h2>Traps for future mistakes</h2>

<p>Suppose you are a developer of a gem and a method needs to be deprecated. Gem has version 0.1.3 and 
the method needs to warn about deprecation until version 0.2 and to be removed in version 0.2. 
It could be marked with <code>TODO</code> for removal in 0.2. Do you think that <code>TODO</code> will ensure timed removal? 
I don&#39;t. </p>

<p>I use exceptions to trap myself so I cannot do such mistakes.</p>
<div class="highlight"><pre><code class="ruby"><span class="k">raise</span> <span class="s1">&#39;remove deprecation&#39;</span> <span class="k">if</span> <span class="no">Algebrick</span><span class="o">.</span><span class="n">version</span> <span class="o">&gt;=</span> <span class="ss">Gem</span><span class="p">:</span><span class="ss">:Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;0.2&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">+</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
  <span class="nb">warn</span> <span class="s1">&#39;a_matcher +-&gt; {} is deprecated, it\&#39;ll be removed in 0.2&#39;</span>
  <span class="nb">self</span> <span class="o">-</span> <span class="n">block</span>
<span class="k">end</span>
</code></pre></div>
<p>If I use this I cannot forget about the deprecation removal. The gem will simply error when I bump version to 0.2 
telling me what I&#39;ve forgotten to fix.</p>

<h2>Another examples</h2>

<ul>
<li><p><strong>Monkey patch</strong> - When writing an monkey patch, a monkey patch should error when patched gem goes outside of
version range which was tested to work with the patch.</p>
<div class="highlight"><pre><code class="ruby"><span class="n">range</span> <span class="o">=</span> <span class="ss">Gem</span><span class="p">:</span><span class="ss">:Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;0.1&#39;</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="ss">Gem</span><span class="p">:</span><span class="ss">:Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;0.3&#39;</span><span class="p">)</span>
<span class="n">range</span><span class="o">.</span><span class="n">cover?</span> <span class="ss">Gem</span><span class="p">:</span><span class="ss">:Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">a_patched_gem_version</span><span class="p">)</span> <span class="ow">or</span>
    <span class="k">raise</span> <span class="s2">&quot;monkey eats only banana version </span><span class="si">#{</span><span class="n">range</span><span class="si">}</span><span class="s2">&quot;</span>
</code></pre></div></li>
<li><p><strong>Internal API usage</strong> - Suppose a code is tied with an internal methods of Rails 3.0 and it&#39;s known that
a upgrade to 3.2 is planned at some point. A error should be thrown when Rails are updated.</p>
<div class="highlight"><pre><code class="ruby"><span class="ss">Gem</span><span class="p">:</span><span class="ss">:Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">version</span><span class="p">)</span> <span class="o">&lt;</span> <span class="ss">Gem</span><span class="p">:</span><span class="ss">:Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;3.1&#39;</span><span class="p">)</span> <span class="ow">or</span>
    <span class="k">raise</span> <span class="s1">&#39;revisit api usage&#39;</span>
</code></pre></div></li>
</ul>

<h2>Caution</h2>

<p>Checks like these should be done in class or module scope to be evaluated only once when loading. 
They should not be placed inside methods.</p>
]]></content>
  </entry>
  
</feed>
