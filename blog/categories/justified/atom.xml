<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: justified | Pitr.ch]]></title>
  <link href="http://blog.pitr.ch/blog/categories/justified/atom.xml" rel="self"/>
  <link href="http://blog.pitr.ch/"/>
  <updated>2013-06-01T19:29:13+02:00</updated>
  <id>http://blog.pitr.ch/</id>
  <author>
    <name><![CDATA[Petr Chalupa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Justified - add missing causes to exceptions]]></title>
    <link href="http://blog.pitr.ch/blog/2013/06/01/justified-add-missing-causes-to-exceptions/"/>
    <updated>2013-06-01T19:52:00+02:00</updated>
    <id>http://blog.pitr.ch/blog/2013/06/01/justified-add-missing-causes-to-exceptions</id>
    <content type="html"><![CDATA[<p>I&#39;ve just published a new gem called <code>justified</code> which is adding missing causes to Ruby exceptions.
When exception is risen because of another it is stored in the new one and backtrace is appended with  </p>
<div class="highlight"><pre><code class="text">from caused by: (AnError) an ugly bug
from justified.rb:83:in `bad_code&#39;
from     ... skipped 4 lines
</code></pre></div>
<!-- more -->

<h2>Example</h2>

<p>Let&#39;s have following snippet:</p>
<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">AnError</span> <span class="o">&lt;</span> <span class="no">StadardError</span><span class="p">;</span> <span class="k">end</span>

<span class="k">def</span> <span class="nf">bad_code</span>
  <span class="k">raise</span> <span class="no">AnError</span><span class="p">,</span> <span class="s1">&#39;an ugly bug&#39;</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">handle_error</span><span class="p">(</span><span class="n">error</span><span class="p">)</span>
  <span class="k">raise</span> <span class="no">AnError</span><span class="p">,</span> <span class="s1">&#39;something went wrong&#39;</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">do_something</span>
  <span class="n">bad_code</span>
<span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">error</span>
  <span class="n">handle_error</span> <span class="n">error</span>
<span class="k">end</span>

<span class="n">do_something</span>
</code></pre></div>
<p>When called it will produce:</p>
<div class="highlight"><pre><code class="text">justified.rb:93:in `handle_error&#39;: something went wrong (AnError)
    from justified.rb:89:in `rescue in do_something&#39;
    from justified.rb:87:in `do_something&#39;
    from justified.rb:96:in `&lt;top (required)&gt;&#39;
    from -e:1:in `load&#39;
    from -e:1:in `&lt;main&gt;&#39;
</code></pre></div>
<p>The real problem <code>an ugly bug</code> is <strong>hidden</strong>. What will happen when <code>justified</code> is used?</p>
<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s1">&#39;justified/stadard_error&#39;</span>

<span class="c1"># ... rest of the snipper</span>
</code></pre></div>
<p>It will produce:</p>
<div class="highlight"><pre><code class="text">justified.rb:93:in `handle_error&#39;: something went wrong (AnError)
    from justified.rb:89:in `rescue in do_something&#39;
    from justified.rb:87:in `do_something&#39;
    from justified.rb:96:in `&lt;top (required)&gt;&#39;
    from -e:1:in `load&#39;
    from -e:1:in `&lt;main&gt;&#39;
    from caused by: (AnError) an ugly bug
    from justified.rb:83:in `bad_code&#39;
    from     ... skipped 4 lines
</code></pre></div>
<p>Of course causes can be concatenated. </p>

<h2>Usage</h2>

<ul>
<li>  <code>require &#39;justified&#39;</code> to include <code>Justified::Error</code> to any exception you need manually</li>
<li>  <code>require &#39;justified/standard_error&#39;</code> to have causes in all exceptions which are kind of <code>StandardError</code></li>
</ul>

<h3>Behavior</h3>

<p>When an exception is risen inside rescue block a cause is automatically recorded.</p>
<div class="highlight"><pre><code class="ruby"><span class="n">e</span> <span class="o">=</span> <span class="k">begin</span>
      <span class="k">raise</span> <span class="s1">&#39;bug&#39;</span>
    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">error</span>
      <span class="k">raise</span> <span class="s1">&#39;this does not work&#39;</span>
    <span class="k">end</span> <span class="k">rescue</span> <span class="vg">$!</span>
<span class="n">e</span><span class="o">.</span><span class="n">cause</span><span class="o">.</span><span class="n">message</span> <span class="o">==</span> <span class="s1">&#39;bug&#39;</span> <span class="c1"># =&gt; true</span>
</code></pre></div>
<p>Cause can be set explicitly.</p>
<div class="highlight"><pre><code class="ruby"><span class="n">e</span> <span class="o">=</span> <span class="k">begin</span>
      <span class="k">raise</span> <span class="s1">&#39;bug&#39;</span>
    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">error</span>
      <span class="k">raise</span> <span class="no">StandardError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;this does not work&#39;</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
    <span class="k">end</span> <span class="k">rescue</span> <span class="vg">$!</span>
<span class="n">e</span><span class="o">.</span><span class="n">cause</span><span class="o">.</span><span class="n">message</span> <span class="o">==</span> <span class="s1">&#39;bug&#39;</span> <span class="c1"># =&gt; true</span>
</code></pre></div>
<p>Or if signature of <code>.new</code> is changed cause can be set with a setter <code>#cause=</code></p>
<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">InspectingError</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
    <span class="k">super</span> <span class="n">object</span><span class="o">.</span><span class="n">inspect</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">e</span> <span class="o">=</span> <span class="k">begin</span>
      <span class="k">raise</span> <span class="s1">&#39;bug&#39;</span>
    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">error</span>
      <span class="k">raise</span> <span class="no">InspectingError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">a</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">cause</span> <span class="o">=</span> <span class="n">error</span> <span class="p">}</span>
    <span class="k">end</span> <span class="k">rescue</span> <span class="vg">$!</span>
<span class="n">e</span><span class="o">.</span><span class="n">cause</span><span class="o">.</span><span class="n">message</span> <span class="o">==</span> <span class="s1">&#39;bug&#39;</span> <span class="c1"># =&gt; true</span>
</code></pre></div>
<p>and</p>
<div class="highlight"><pre><code class="ruby"><span class="n">e</span> <span class="o">=</span> <span class="k">begin</span>
      <span class="k">raise</span> <span class="s1">&#39;bug&#39;</span>
    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">error</span>
      <span class="k">raise</span> <span class="no">InspectingError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">a</span><span class="p">:</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span>
    <span class="k">end</span> <span class="k">rescue</span> <span class="vg">$!</span>
<span class="n">e</span><span class="o">.</span><span class="n">cause</span><span class="o">.</span><span class="n">message</span> <span class="o">==</span> <span class="s1">&#39;bug&#39;</span> <span class="c1"># =&gt; true</span>
</code></pre></div>
<p>will work as well.</p>

<h2>Do you wish to know more?</h2>

<ul>
<li>  Documentation: <a href="http://blog.pitr.ch/justified">http://blog.pitr.ch/justified</a></li>
<li>  Source: <a href="https://github.com/pitr-ch/justified">https://github.com/pitr-ch/justified</a></li>
<li>  Blog: <a href="http://blog.pitr.ch/blog/categories/justified/">http://blog.pitr.ch/blog/categories/justified/</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
