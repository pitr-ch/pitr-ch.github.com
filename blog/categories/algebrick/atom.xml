<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algebrick | Pitr.ch]]></title>
  <link href="http://blog.pitr.ch/blog/categories/algebrick/atom.xml" rel="self"/>
  <link href="http://blog.pitr.ch/"/>
  <updated>2013-05-14T22:05:45+02:00</updated>
  <id>http://blog.pitr.ch/</id>
  <author>
    <name><![CDATA[Petr Chalupa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Algebrick - Algebraic types and pattern matching for Ruby]]></title>
    <link href="http://blog.pitr.ch/blog/2013/05/14/algebrick-algebraic-types-and-pattern-matching-for-ruby/"/>
    <updated>2013-05-14T21:19:00+02:00</updated>
    <id>http://blog.pitr.ch/blog/2013/05/14/algebrick-algebraic-types-and-pattern-matching-for-ruby</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve just released a new gem <strong>algebrick</strong> which brings Algebraic types and pattern matching to Ruby.
It&rsquo;s not that powerfull as Haskell&rsquo;s but it can still be quite useful. Let me give you a quick taste of the syntax.</p>

<!-- more -->


<p>``` ruby Quick example</p>

<h1>load DSL for type definition</h1>

<p>extend Algebrick::DSL                              # => main</p>

<h1>define a Maybe type, which has two possible values:</h1>

<h1>None or Some caring a value of Object type</h1>

<p>type_def { maybe === none | some(Object) }</p>

<h1>=> [Maybe(None | Some), None, Some(Object)]</h1>

<h1>Maybe, None and Some are now defined</h1>

<p>[Maybe, None, Some]</p>

<h1>=> [Maybe(None | Some), None, Some(Object)]</h1>

<h1>access #match and #any methods for pattern matching</h1>

<p>extend Algebrick::Matching                         # => main</p>

<p>match None,</p>

<pre><code>  None &gt;&gt; nil,
  # ~ will match value of Some and pass it to the block
  Some.(~any) --&gt; value { value }              # =&gt; nil
</code></pre>

<p>match Some[1],</p>

<pre><code>  None &gt;&gt; nil,
  Some.(~any) --&gt; value { value*2 }            # =&gt; 2
</code></pre>

<h1>lets add some method to the Maybe type</h1>

<p>module Maybe
  def maybe(&amp;block)</p>

<pre><code>case self
when None
when Some
  block.call value
end
</code></pre>

<p>  end
end                                                # => nil</p>

<h1>#maybe method is now defined on both None and Some</h1>

<p>None.maybe { |_| raise &lsquo;never ever happens&rsquo; }      # => nil</p>

<h1>block is called with the value</h1>

<p>Some[1].maybe { |v| v*2 }                          # => 2
```</p>

<h2>Do you wish to know more?</h2>

<ul>
<li>Documentation: <a href="http://blog.pitr.ch/algebrick">http://blog.pitr.ch/algebrick</a></li>
<li>Source: <a href="https://github.com/pitr-ch/algebrick">https://github.com/pitr-ch/algebrick</a></li>
</ul>


<p>Please leave a comment if you have questions.</p>
]]></content>
  </entry>
  
</feed>
